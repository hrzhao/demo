<?xml version="1.0" encoding="utf-8"?>
<frame:EWModule xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:frame="frame.*" width="100%" height="100%"
				creationComplete="creationCompleteHandler(event)" xmlns:UI="common.UI.*" xmlns:common="common.*"
				>
	<fx:Script>
		<![CDATA[
			import com.siloon.plugin.rightClick.RightClickManager;
			
			import common.UI.LabelProgress;
			
			import components.AppPanel;
			import components.DgcMenu;
			
			import entities.AppConfig;
			
			import events.CustomEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridItemRenderer;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.MessageBox;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
//				eventDemoTest();
			}
			
			[Bindable]
			private var appConfigList:ArrayCollection = new ArrayCollection();
			private var op_getList:AbstractOperation = null;
			private function getAppConfigList():void{
				if(op_getList == null){
					op_getList = ro.getOperation("getAppConfigBeanList");
					op_getList.addEventListener(ResultEvent.RESULT,function(event:ResultEvent):void{
						if(event.result.state == "success"){
							if(event.result.data is ArrayCollection){
								appConfigList = event.result.data;
								hideLoading();
							}
						}
					},false,0,true);//设为弱引用，让垃圾机制回收
					op_getList.addEventListener(FaultEvent.FAULT,faultEvent,false,0,true);//设为弱引用，让垃圾机制回收
				}
				op_getList.send();
				showLoading("正在查询...");
			}
			protected function faultEvent(event:FaultEvent):void{
				hideLoading();
				MessageBox.show(event.message.toString());
			}
			
			protected function btn_search_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				getAppConfigList()
			}
			
			protected function dg_appConfig_rightClickHandler(event:MouseEvent):void
			{
				var item:uint;
				if(onRightClicked(event) == -1){
					item = DgcMenu.ADD;
				}else if(onRightClicked(event) >=0){
					item = DgcMenu.ADD;
					item += DgcMenu.EDIT;
					item += DgcMenu.DELETE;
				}else{
					return;
				}
				popUpMenu(item);
			}
			
			/**
			 * 当右键单击Tree的Item时，自动选择鼠标所在的当前项
			 * @param e 自定义右键菜单事件
			 * 
			 */
			private function onRightClicked(e:MouseEvent):int
			{
				var itemRender:AdvancedDataGridItemRenderer = null;  
				var selectedIndex:int = -2;
				if(!(e.target.hasOwnProperty("owner") && e.target.owner is AdvancedDataGrid))
					return selectedIndex;
				var dg:AdvancedDataGrid = e.target.owner as AdvancedDataGrid;
				if(e.target is AdvancedDataGridItemRenderer){
					itemRender = AdvancedDataGridItemRenderer(e.target);
					if(itemRender != null) {  
						selectedIndex = dg.itemRendererToIndex(itemRender);
					}  
				}else{
					selectedIndex = -1;
				}
				if(dg_appConfig.selectedIndex != selectedIndex){
					dg.selectedIndex = selectedIndex;
				}
				return selectedIndex;
			}
			private var menu:Menu = null;
			private function popUpMenu(item:uint):void{
				if(menu!=null){
					menu.removeEventListener(MenuEvent.ITEM_CLICK,menuItemClick_Handler);
					menu.hide();
					menu = null;
				}
				
				menu = DgcMenu.createMenu(this,item,false);
				
				var point:Point = localToGlobal(new Point(mouseX,mouseY));
				menu.addEventListener(MenuEvent.ITEM_CLICK,menuItemClick_Handler);
				menu.show(point.x,point.y);
			}
			
			protected function menuItemClick_Handler(event:MenuEvent):void
			{
				// TODO Auto-generated method stub
				if(event.label == DgcMenu.sADD){
					addApp();
				}
				if(event.label == DgcMenu.sEDIT){
					if(dg_appConfig.selectedItem == null || !(dg_appConfig.selectedItem is AppConfig)){
						MessageBox.show("请选择要编辑的记录!");
						return;
					}
					editApp(dg_appConfig.selectedItem as AppConfig);
				}
				if(event.label == DgcMenu.sDELETE){
					if(dg_appConfig.selectedItem == null){
						MessageBox.show("请选择要删除的记录!");
						return;	
					}
					var appId:String = (dg_appConfig.selectedItem as AppConfig).appId;
					delApp(appId);
				}
			}
			private function findNaviContByLable(label:String):NavigatorContent{
				var result:NavigatorContent = null;
				for each(var naviCont:NavigatorContent in viewStack.getChildren()){
					if(naviCont.label == label){
						result = naviCont;
					}
				}
				return result;
			}
			
			private function buildAppPanelNaviCont(label:String,mode:uint = DgcMenu.ADD,appConfig:AppConfig = null):NavigatorContent
			{
				var naviCont:NavigatorContent = new NavigatorContent();
				naviCont.percentWidth = 100;
				naviCont.percentHeight = 100;
				naviCont.label = label;
				var appPanel:AppPanel = new AppPanel();
				appPanel.addEventListener("commit",appPanelCommitHandler);
				appPanel.addEventListener("cancel",appPanelCancelHandler);
				appPanel.mode = mode;
				appPanel.percentWidth = 100;
				appPanel.percentHeight = 100;
				appPanel.appConfig = appConfig;
				naviCont.addElement(appPanel);
				return naviCont;
			}
			
			private var op_getAppConfig:AbstractOperation = null;
			private function getAppConfigFromDB(appId:String):void{
				if(op_getAppConfig == null){
					op_getAppConfig = ro.getOperation("getAppConfigBean");
					op_getAppConfig.addEventListener(ResultEvent.RESULT,function(event:ResultEvent):void{
						if(event.result.state == "success"){
							var appConfig:AppConfig = event.result.data;
							if(curAppPanel.mode == DgcMenu.ADD){
								if(appConfig){
									hideLoading();
									MessageBox.show("模块Id已存在，不可添加相同ID的模块");
									return;
								}
							}else if(curAppPanel.mode == DgcMenu.EDIT){
								if(!appConfig){
									hideLoading();
									MessageBox.show("模块Id不存在或已被删除，请先检查再修改");
									return;
								}
							}
							saveOrAddAppConfig(curAppPanel.appConfig);
						}
					},false,0,true);//设为弱引用，让垃圾机制回收
					op_getAppConfig.addEventListener(FaultEvent.FAULT,function(event:FaultEvent):void{
						MessageBox.show(event.message.toString());
						curAppPanel = null;
					},false,0,true);//设为弱引用，让垃圾机制回收
				}
				op_getAppConfig.send(appId);
				showLoading("查询记录已存在否，再保存...");
			}
			
			private var curAppPanel:AppPanel = null;
			private function appPanelCommitHandler(event:CustomEvent):void{
				curAppPanel = event.target as AppPanel;
				var appId:String = event.data as String;
				getAppConfigFromDB(appId);
				
				
			}
			
			
			private var op_saveAppConfig:AbstractOperation = null;
			private function saveOrAddAppConfig(appConfig:AppConfig):void{
				if(op_saveAppConfig == null){
					op_saveAppConfig = ro.getOperation("saveOrAddAppConfigBean");
					op_saveAppConfig.addEventListener(ResultEvent.RESULT,function(event:ResultEvent):void{
						if(event.result.state == "success"){
							hideLoading();
							MessageBox.show("保存成功");
							if(curAppPanel != null){
								if(curAppPanel.mode == DgcMenu.ADD){
									curAppPanel.mode = DgcMenu.EDIT;
								}
								curAppPanel = null;
							}
						}
					},false,0,true);//设为弱引用，让垃圾机制回收
					op_saveAppConfig.addEventListener(FaultEvent.FAULT,function(event:FaultEvent):void{
						hideLoading();
						MessageBox.show("保存失败\r\n"+event.message.toString());
						curAppPanel = null;
					},false,0,true);//设为弱引用，让垃圾机制回收
				}
				op_saveAppConfig.send(appConfig);
				showLoading("正在保存...");
			}
			
			private function appPanelCancelHandler(event:CustomEvent):void{
				viewStack.removeElement(((event.target as AppPanel).owner as NavigatorContent));
			}
			private function addApp():void{
				var label:String = "添加模块";
				var naviCont:NavigatorContent = findNaviContByLable(label);
				if(naviCont == null){
					naviCont = buildAppPanelNaviCont(label);
					viewStack.addElement(naviCont);
				}
				viewStack.selectedChild = naviCont;
			}
			private function editApp(appConfig:AppConfig):void{
				var naviCont:NavigatorContent = buildAppPanelNaviCont(appConfig.name,DgcMenu.EDIT,appConfig);
				if(naviCont != null){
					viewStack.addElement(naviCont);
					viewStack.selectedChild = naviCont;
				}
			}
			private function delApp(appId:String):void{
				showLoading("正在删除...");
				delAppConfigBeanByAppId(appId);
			}
			private function showLoading(notice:String):void{
				if(notice != null){
					progressLabel.notice = notice;
				}
				progressLabel.visible = true;
				
			}
			private function hideLoading():void{
				progressLabel.visible = false;
			}
			
			private var op_del:AbstractOperation;
			private function delAppConfigBeanByAppId(appId:String):void{
				if(op_del == null){
						op_del = ro.getOperation("delAppConfigBeanByAppId");
					op_del.addEventListener(ResultEvent.RESULT,function(event:ResultEvent):void{
						if(event.result.state == "success"){
							hideLoading();
							MessageBox.show("删除成功");
							appConfigList.removeItemAt(dg_appConfig.selectedIndex);
						}
					},false,0,true);
					op_del.addEventListener(FaultEvent.FAULT,function(event:FaultEvent):void{
						hideLoading();
						MessageBox.show("删除失败\r\n"+event.message.toString());
					},false,0,true);
				}
				op_del.send(appId);
			}
			
			protected function dg_appConfig_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
//				MessageBox.show("click"+event.localX+"_"+event.localY);
			}
			
		
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RemoteObject id="ro" destination="frameService" />
	</fx:Declarations>
	<s:Line top="27" right="0" left="0">
		<s:stroke>
			<s:SolidColorStroke color="0xb4cadc" weight="1" />
		</s:stroke>
	</s:Line>
	<common:CloseableTabBar id="tabbar" left="5" top="3" maxWidth="955" dataProvider="{this.viewStack}" 
									   lockedTabCount="1" height="25" buttonMode="true" labelField="label">
	</common:CloseableTabBar>
	<mx:ViewStack id="viewStack" width="100%" top="28" height="100%">
		<s:NavigatorContent width="100%" height="100%" label="模块列表">
			<s:Group  width="100%" height="100%" >
				<s:BorderContainer backgroundColor="#DDDDDD" borderColor="#808080" 
								   top="8" left="15" right="15" height="30">
					<s:Label left="28" top="8" text="模块名称："/>
					<s:TextInput id="txt_moduleName" left="88" top="3" width="180"/>
					<s:Button id="btn_search" right="10" top="3" label="查询" click="btn_search_clickHandler(event)"/>
				</s:BorderContainer>
				<mx:AdvancedDataGrid id="dg_appConfig" top="43" left="15" right="15" bottom="10"
									 horizontalScrollPolicy="auto" verticalScrollPolicy="auto"
									 dataProvider="{appConfigList}"
									 sortExpertMode="true"
									 rightClick="dg_appConfig_rightClickHandler(event)"
									 click="dg_appConfig_clickHandler(event)"
									 >
					<mx:columns>
						<mx:AdvancedDataGridColumn dataField="appId" headerText="应用ID" width="200"/>
						<mx:AdvancedDataGridColumn dataField="name" headerText="名称" width="120"/>
						<mx:AdvancedDataGridColumn dataField="categoryId" headerText="目录ID" width="150"/>
						<mx:AdvancedDataGridColumn dataField="param" headerText="参数" width="120"/>
						<mx:AdvancedDataGridColumn dataField="multiInstance" headerText="多实例" width="60"/>
						<mx:AdvancedDataGridColumn dataField="description" headerText="说明" width="120"/>
						<mx:AdvancedDataGridColumn dataField="path" headerText="路径" width="80"/>
						<mx:AdvancedDataGridColumn dataField="priority" headerText="排序" width="40"/>
						<mx:AdvancedDataGridColumn dataField="icon" headerText="图标" width="80"/>
						
					</mx:columns>
				</mx:AdvancedDataGrid>
			</s:Group>
		</s:NavigatorContent>
	</mx:ViewStack>
	<!---
	<s:BorderContainer id="outCont" top="100" width="100%" bottom="0" borderColor="#000000" backgroundColor="#ffccbb" click="outCont_clickHandler(event)">
		<s:BorderContainer id="inCont" width="50%" height="50%" backgroundColor="#ccffbc" click="inCont_clickHandler(event)">
			<s:Button id="button1" label="Button1" click="button1_clickHandler(event)" top="50" left="100"/>
			<s:Button id="button2" label="Button2" click="button2_clickHandler(event)" top="50" left="200"/>
			<s:TextArea id="txt_rs" text="ready   " top="80" width="300"/>
		</s:BorderContainer>
 	</s:BorderContainer>
	<s:Button id="button3" label="Button3" top="5" right="250" click="button3_clickHandler(event)"/>
	-->
	<UI:LabelProgress id="progressLabel" visible="false"/>
</frame:EWModule>

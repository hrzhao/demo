<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 creationComplete="group1_creationCompleteHandler(event)" 
		 xmlns:plugin="plugin.*" 
		 xmlns:frame="frame.*"
		 implements="frame.IAppFrame"
		 >
	<fx:Script>
		<![CDATA[
			import entities.AppConfig;
			import entities.OrderColumn;
			import entities.ResultObject;
			import entities.UserBean;
			
			import events.MenuClickEvent;
			
			import frame.IModule;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ModuleEvent;
			import mx.graphics.BitmapScaleMode;
			import mx.modules.IModuleInfo;
			import mx.modules.ModuleManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.Operation;
			import mx.rpc.remoting.RemoteObject;
			
			import utils.MessageBox;
			import utils.RemoteExt;
			import utils.ToolsUtil;
			public var _user:UserBean;
			public var appDic:Dictionary;
			private var ro:RemoteExt = new RemoteExt("frameService");
			[Bindable]
			private var appConfigList:ArrayCollection = new ArrayCollection();
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				appDic = new Dictionary();
				var orderColumns:ArrayCollection = new ArrayCollection();
				var orderColumn:OrderColumn = new OrderColumn();
				orderColumn.ascending = false;
				orderColumn.column = "priority";
				orderColumns.addItem(orderColumn);
				ro.call("getAppConfigBeanList",getAppConfigBeanList_resultHandler,faultHandler,orderColumns)
			}
			private function getAppConfigBeanList_resultHandler(result:ResultObject):void{
				if(result.state == "success"){
					if(result.data is ArrayCollection){
						appConfigList = result.data as ArrayCollection;
						for each(var val:AppConfig in appConfigList){
							appDic[val.appId] = val;
						}
					}
				}
			}

			protected function faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				MessageBox.show(event.message.toString());
			}
			private var appStoreId:String = "4d7665a6-175c-49e1-b89d-d8628157355e";
			protected function header_homeButtonClickHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				runAppByAppId(appStoreId);
			}
			protected function runAppByAppId(appId:String):void{
				if(appId == null || appId =="")
				{
					MessageBox.show("AppID为空");
					return;
				}
				header.selectedAppId = null;
				header.selectedAppId = appId;
				if(appDic != null &&
					appDic.hasOwnProperty(appId) &&
					appDic[appId] != null &&
					appDic[appId] is AppConfig)
				{
					var appConfig:AppConfig = appDic[appId];
					header.runningApp = appConfig.name;
					if(appConfig.multiInstance){
						runApp(appId);
					}else{
						var hasInit:Boolean = false;
						for each(var navi:MainNavigatorContent in viewStack.getChildren()){
							if(navi.appId == appId){
								viewStack.selectedChild = navi;
								hasInit = true;
								break;
							}
						}
						if(!hasInit){
							runApp(appId);
						}
					}
				}else{
					header.selectedAppId = null;
					header.runningApp = "";
				}
			}
			private function runApp(appId:String):void{
				var appConfig:AppConfig = appDic[appId];
				var paramObj:Object = ToolsUtil.jsonToObject(appConfig.param);
				getLoadModule(appConfig,paramObj);
			}
			private var isLoading:Boolean = false;//未完成 
			private var mInfo:IModuleInfo;
			private function getLoadModule(appConfig:AppConfig, param:Object):void
			{
				isLoading = true;
				var path:String = appConfig.path;
				mInfo = ModuleManager.getModule(path);
				mInfo.data = {"appConfig":appConfig, "param":param };
				mInfo.addEventListener(ModuleEvent.READY, modulReady);   
				mInfo.addEventListener(ModuleEvent.ERROR, modulError);
				mInfo.addEventListener(ModuleEvent.SETUP, modulSetup);
				mInfo.load(null, null, null, moduleFactory);
			}
			
			private function modulError(e:ModuleEvent):void
			{
				// TODO Auto Generated method stub
				var errorMsg:String = "";
				if(e.errorText == null){
					errorMsg = "加载模块时出错，未知错误原因\r\n" +  e.toString();
				}else{
					errorMsg = e.errorText;
				}
				MessageBox.show(errorMsg);
			}
			
			private function modulSetup(e:ModuleEvent):void
			{
				// TODO Auto Generated method stub
			}
		
			
			private function modulReady(e:ModuleEvent):void
			{
				// TODO Auto Generated method stub
				mInfo.removeEventListener(ModuleEvent.READY, modulReady);   
				mInfo.removeEventListener(ModuleEvent.ERROR, modulError);
				mInfo.removeEventListener(ModuleEvent.SETUP, modulSetup);
				var appConfig:AppConfig = e.module.data.appConfig;
				createModule(e.module,appConfig,e.module.data.param);
			}
			private function createModule(moduleInfo:IModuleInfo,appConfig:AppConfig,param:Object):void{
				var module:IVisualElement = moduleInfo.factory.create() as IVisualElement;
				if(module is IModule){
					var iModule:IModule = (module as IModule);
					iModule.param = param;
					iModule.appId = appConfig.appId;
					iModule.appFrame = this;
					
					var naviCont:MainNavigatorContent = new MainNavigatorContent();
					naviCont.top = 0;
					naviCont.bottom = 0;
					naviCont.right = 0;
					naviCont.left= 0;
					naviCont.module = (module as IModule);
					naviCont.moduleInfo = moduleInfo;
					naviCont.appId = appConfig.appId;
					naviCont.iconPath = appConfig.icon;
					naviCont.addElement(module);
					viewStack.addElement(naviCont);
					viewStack.selectedChild = naviCont;
				}else{
					MessageBox.show("请确认模块是否继承了接口");
				}
			}
			
			public function popupLoginPanel():void
			{
				// TODO Auto Generated method stub
				
			}
			
			public function get selectedModule():IModule
			{
				// TODO Auto Generated method stub
				return null;
			}
			
			public function set selectedTabIndex(value:int):void
			{
				// TODO Auto Generated method stub
				
			}
			
			public function get user():UserBean
			{
				// TODO Auto Generated method stub
				return _user;
			}
			public function set user(value:UserBean):void{
				_user = value;
			}
			
			protected function btn_clear_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				for each(var navi:MainNavigatorContent in viewStack.getChildren()){
					navi.moduleInfo.release();
					navi.moduleInfo.unload();
				}
				viewStack.removeAllElements();
				header.selectedAppId = null;
				header.runningApp = "";
			}
			
			protected function header_menuClickHandler(event:MenuClickEvent):void
			{
				// TODO Auto-generated method stub
				runAppByAppId(event.appId);
			}
			protected function logout_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				LoginAuth.Logout();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Image id="img_bg" width="100%" height="100%" source="@Embed(source='assets/登录_背景.jpg')" scaleMode="{BitmapScaleMode.ZOOM}"/>
	<s:Group top="90" left="0" right="0" bottom="0" id="mainGroup">
		<mx:ViewStack id="viewStack" left="0" right="0" top="0" bottom="0" />
	</s:Group>
	<frame:Header id="header" homeButtonClick="header_homeButtonClickHandler(event)" 
				  menuClick="header_menuClickHandler(event)"
				  appConfigList="{appConfigList}"/>
	<s:Button id="btn_clear" x="215" y="60" height="24" width="24" skinClass="skins.PicButtonSkin"
			  toolTip="关闭所有应用..."
			  buttonMode="true"
			  icon="@Embed(source='assets/btn_gis_close1.png')"
			  click="btn_clear_clickHandler(event)"/>
	<s:BorderContainer id="logout" click="logout_clickHandler(event)" toolTip="logout" 
					   width="30" height="20" top="0" left="0" 
					   alpha="0.3"
					   borderVisible="false"
					   buttonMode="true"/>
	<s:BorderContainer id="refresh" toolTip="refresh" width="30" height="20" top="0" left="50"
					   alpha="0.3"
					   borderVisible="false"
					   buttonMode="true"/>
</s:Group>

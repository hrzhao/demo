>>>>基本配置
	>>>映射文件User.hbm.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="com.hi2dm.hibernate.beans">
    <class name="User" table="user">
        <id name="id" column="id" type="integer"><!--id为主键-->
        	<generator class="native"></generator><!-- 意思就是不能指定值，由数据库自己动生成 -->
        </id>
        <property name="username" column="username" type="string"/>
        <property name="password" column="password" type="string"/>
        <property name="email" column="email" type="string"/>
    </class>
</hibernate-mapping>
---------------------------------------------------
	>>>主配置文件hibernate.cfg.xml
<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
          "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
          "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<!-- Generated by MyEclipse Hibernate Tools.                   -->
<hibernate-configuration>

    <session-factory>
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="connection.url">jdbc:mysql://localhost:3306/test</property>
        <property name="connection.username">root</property>
        <property name="connection.password">7544</property>
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="hbm2ddl.auto">update</property>
    	<mapping resource="com/hi2dm/hibernate/beans/User.hbm.xml"/>
    </session-factory>

</hibernate-configuration>
--------------------------------------------------------
	>>>业务逻辑UserService.java
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Configuration cfg = new Configuration();//新建参数
		cfg.configure();//实例化
		SessionFactory sf = cfg.buildSessionFactory();//通过Configuration获取SessionFactory
		Session session = sf.openSession();//打开Session
		Transaction tx=session.beginTransaction();
		User user = new User();
		user.setId(13);
		user.setEmail("rong12345@139.com");
		user.setPassword("455889");
		user.setUsername("HRZHAO");
		session.save(user);
		tx.commit();
		session.close();
		System.out.println("end");
	}
-------------------------------------------------
	>>>工具辅助类HibernateSessionFactory
package com.hi2dm.hibernate.util;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.cfg.Configuration;

/**
 * Configures and provides access to Hibernate sessions, tied to the
 * current thread of execution.  Follows the Thread Local Session
 * pattern, see {@link http://hibernate.org/42.html }.
 */
public class HibernateSessionFactory {

    /** 
     * Location of hibernate.cfg.xml file.
     * Location should be on the classpath as Hibernate uses  
     * #resourceAsStream style lookup for its configuration file. 
     * The default classpath location of the hibernate config file is 
     * in the default package. Use #setConfigFile() to update 
     * the location of the configuration file for the current session.   
     */
    private static String CONFIG_FILE_LOCATION = "/hibernate.cfg.xml";
	private static final ThreadLocal<Session> threadLocal = new ThreadLocal<Session>();
    private  static Configuration configuration = new Configuration();    
    private static org.hibernate.SessionFactory sessionFactory;
    private static String configFile = CONFIG_FILE_LOCATION;

	static {
    	try {
			configuration.configure(configFile);
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception e) {
			System.err
					.println("%%%% Error Creating SessionFactory %%%%");
			e.printStackTrace();
		}
    }
    private HibernateSessionFactory() {
    }
	
	/**
     * Returns the ThreadLocal Session instance.  Lazy initialize
     * the <code>SessionFactory</code> if needed.
     *
     *  @return Session
     *  @throws HibernateException
     */
    public static Session getSession() throws HibernateException {
        Session session = (Session) threadLocal.get();

		if (session == null || !session.isOpen()) {
			if (sessionFactory == null) {
				rebuildSessionFactory();
			}
			session = (sessionFactory != null) ? sessionFactory.openSession()
					: null;
			threadLocal.set(session);
		}

        return session;
    }

	/**
     *  Rebuild hibernate session factory
     *
     */
	public static void rebuildSessionFactory() {
		try {
			configuration.configure(configFile);
			sessionFactory = configuration.buildSessionFactory();
		} catch (Exception e) {
			System.err
					.println("%%%% Error Creating SessionFactory %%%%");
			e.printStackTrace();
		}
	}

	/**
     *  Close the single hibernate session instance.
     *
     *  @throws HibernateException
     */
    public static void closeSession() throws HibernateException {
        Session session = (Session) threadLocal.get();
        threadLocal.set(null);

        if (session != null) {
            session.close();
        }
    }

	/**
     *  return session factory
     *
     */
	public static org.hibernate.SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	/**
     *  return session factory
     *
     *	session factory will be rebuilded in the next call
     */
	public static void setConfigFile(String configFile) {
		HibernateSessionFactory.configFile = configFile;
		sessionFactory = null;
	}

	/**
     *  return hibernate configuration
     *
     */
	public static Configuration getConfiguration() {
		return configuration;
	}

}

-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------
>>>>一般主要文件
	|-- 1、Domain object（Bean）
	|-- 2、mapping
	|-- 3、DB表
		1->2->3或3->1、2

	>>>Domain
	1、若有有参构造函数同时必须有显式无参构造函数
	2、一般都要有id属性
	3、冷加载
	
	>>>mapping文件
	<class name="User" table="user">
	<composite-id></composite-id>
	<id name="id" unsaved-value="-1">〈!-- 主键 -->
		<generator class="native"/><!-- 主键生成器 -->
	</id>
	<property name="username" column="username"/>
	 <many-to-one name="department" column="department_id" lazy="false" fetch="join"/>
	</class>

	id的unsaved-value

------------------------------------------------------------------
>>>>一对多，多对一，一对一
	<set name="emps" lazy="false">
        	<key column="department_id"/>
        	<one-to-many class="Employee"/>
        </set>
	-------------
	<many-to-one name="department" column="department_id" lazy="false" fetch="join"/>
	------------  
	<one-to-one name"person" constrained="true"/>外键引用true	
	<id name="id">
		<generator class="foreign">
			<param name="proterty">person</param>
		</generator>
	</id>
---------------------------------------------------------------------
>>>>Configuration
	Configuration.configure(String config_file_location);
		默认值config_file_location="/hibernate.cfg.xml"
>>>>Session
	get(Class,int)  返回一个对象
	load(Class,int) 返回一个对象（懒加载）永不返回空
	save(Object)	开启事务时，不会写入数据库，要commit
	persist(Object)保存，不产生insert语句，没开启事务永不会插入
	merge()		与update()类似，对象仍是脱管的
	refresh()	重新读取一次
	saveOrUpdate()	对象变成持久的
	update()	
	lock()
	evict()		清缓存
	clear()
	close()
	>>>三种状态
	|--trasient	瞬时对象
	|--persistent	持久
	|--detached	脱管（可用update更新脱管对象）
	

	>>>持久对象，默认为在Transaction.commit()时才会更新数据库
	

>>>>查询
	>>>
	sql="from User as user where user.username=:username"
	query=session.createQuery(hql);
	query.setStringL("username","admin");
	>>>
	query.setFirstResult(0);
	query.setMaxResults(10);
	query.list();
	>>>
	Criteria 与Query类似
	Criteria criteria = session.createCriteria(User.class);
	
-----------------------------------------------------------------------
>>>>表名或字段名关键字冲突
	可加 ` ，例如：`表名`   `字段名`
	<!--级联 -->
	<set name="xxx" cascade="save-update">
	</set>
	<!-- 是否放弃对关联关系的数据库维护 -->
	<set name="xxx" inverse="true">
	</set>
>>>>
	组件
	<component name="name">
		<property name="firstName" column="first_name"/>
		<property name="lastName" column="last_name"/>
	</componetn>

